//===-- RISCVISelDAGToDAG.cpp - A dag to dag inst selector for RISCV ------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the RISCV target.
//
//===----------------------------------------------------------------------===//

#include "RISCV.h"
#include "RISCVAnalyzeImmediate.h"
#include "MCTargetDesc/RISCVMCTargetDesc.h"
#include "RISCVTargetMachine.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/IR/Function.h" // To access function attributes.
#include "llvm/Support/Debug.h"
#include "llvm/Support/MathExtras.h"
#include "llvm/Support/raw_ostream.h"
using namespace llvm;

#define DEBUG_TYPE "riscv-isel"

// RISCV-specific code to select RISCV machine instructions for
// SelectionDAG operations.
namespace {
class RISCVDAGToDAGISel final : public SelectionDAGISel {
  const RISCVSubtarget &Subtarget;
  unsigned LUI, ADDI;
public:
  explicit RISCVDAGToDAGISel(RISCVTargetMachine &TargetMachine)
      : SelectionDAGISel(TargetMachine),
        Subtarget(*TargetMachine.getSubtargetImpl()) {
    LUI = Subtarget.isRV64() ? RISCV::LUI64 : RISCV::LUI;
    ADDI = Subtarget.isRV64() ? RISCV::ADDI64 : RISCV::ADDI;
  }

  StringRef getPassName() const override {
    return "RISCV DAG->DAG Pattern Instruction Selection";
  }

  void Select(SDNode *Node) override;

  bool SelectInlineAsmMemoryOperand(const SDValue &Op, unsigned ConstraintID,
                                    std::vector<SDValue> &OutOps) override;

  bool selectRegAddr(SDValue Addr, SDValue &Base) {
    //always just register
    Base = Addr;
    return true;
  }

  bool selectAddrFrameIndex(SDValue Addr, SDValue &Base, SDValue &Offset) const;
  bool selectAddrFrameIndexOffset(SDValue Addr, SDValue &Base,
                                  SDValue &Offset, unsigned OffsetBits) const;
  bool SelectAddrRegImm12s(SDValue Addr, SDValue &Base, SDValue &Offset) const;

  bool SelectAddr16BitInstOffset(SDValue Addr, SDValue &Base,
                                 SDValue &Offset, unsigned OffsetBits,
                                 unsigned ShiftBits) const;

  bool SelectAddrRegImm5uWord(SDValue Addr, SDValue &Base,
                              SDValue &Offset) const;

  bool SelectAddrRegImm5uDouble(SDValue Addr, SDValue &Base,
                                SDValue &Offset) const;

// Include the pieces autogenerated from the target description.
#include "RISCVGenDAGISel.inc"
};
}

/// Match frameindex
bool RISCVDAGToDAGISel::selectAddrFrameIndex(SDValue Addr, SDValue &Base,
                                             SDValue &Offset) const {
  EVT ValTy = Addr.getValueType();
  if (FrameIndexSDNode *FIN = dyn_cast<FrameIndexSDNode>(Addr)) {

    Base   = CurDAG->getTargetFrameIndex(FIN->getIndex(), ValTy);
    Offset = CurDAG->getTargetConstant(0, SDLoc(Addr), ValTy);
    return true;
  }

  // Default split Addr out of addressing mode
  // E.g. Reg = SP + 3, load [Reg]
  Base = Addr;
  Offset  = CurDAG->getTargetConstant(0, SDLoc(Addr), ValTy);
  return true;
}

/// Match frameindex + offset
bool RISCVDAGToDAGISel::selectAddrFrameIndexOffset(SDValue Addr, SDValue &Base,
                                                   SDValue &Offset,
                                                   unsigned OffsetBits) const {
  if (CurDAG->isBaseWithConstantOffset(Addr)) {
    ConstantSDNode *CN = dyn_cast<ConstantSDNode>(Addr.getOperand(1));

    if (isIntN(OffsetBits, CN->getSExtValue())) {
      EVT ValTy = Addr.getValueType();

      // If the first operand is a FI, get the TargetFI Node
      if (FrameIndexSDNode *FIN = dyn_cast<FrameIndexSDNode>
                                  (Addr.getOperand(0)))
        Base = CurDAG->getTargetFrameIndex(FIN->getIndex(), ValTy);
      else
        Base = Addr.getOperand(0);

      Offset = CurDAG->getTargetConstant(CN->getZExtValue(), SDLoc(Addr),
                                         ValTy);
      return true;
    }
  }
  return false;
}

bool RISCVDAGToDAGISel::SelectAddrRegImm12s(SDValue Addr, SDValue &Base,
                                            SDValue &Offset) const {
  if ((Addr.getOpcode() == ISD::ADD
      || Addr.getOpcode() == ISD::OR)
      && selectAddrFrameIndexOffset(Addr, Base, Offset, 12))
    return true;

  if (Addr.isMachineOpcode()
      && Addr.getMachineOpcode() == RISCV::ADDI
      && Addr.getOperand(0).isMachineOpcode ()
      && Addr.getOperand(0).getMachineOpcode() == RISCVDAGToDAGISel::LUI) {
    // Use the hi-part register content, if possible.
    // Example:
    // lui reg, %hi(sym)
    // addi reg, reg, %lo(sym)
    // lw rt, 0(reg)
    // To:
    // lui reg, %hi(sym)
    // lw rt, %lo(sym)(reg)
      SDValue Opnd0 = Addr.getOperand(1);
      if (isa<ConstantPoolSDNode>(Opnd0) || isa<GlobalAddressSDNode>(Opnd0) ||
          isa<JumpTableSDNode>(Opnd0)) {
        Base = Addr.getOperand(0);
        Offset = Opnd0;
        return true;
      }
  }

  if (selectAddrFrameIndex(Addr, Base, Offset))
    return true;

  return false;
}

// Select 16 bit Load/Store instructions
bool RISCVDAGToDAGISel::SelectAddr16BitInstOffset(SDValue Addr,
                                                  SDValue &Base,
                                                  SDValue &Offset,
                                                  unsigned OffsetBits,
                                                  unsigned ShiftBits) const {
  if ((Addr.getOpcode() == ISD::ADD) &&
      CurDAG->isBaseWithConstantOffset(Addr)) {
    ConstantSDNode *CN = dyn_cast<ConstantSDNode>(Addr.getOperand(1));

    if (isUIntN(OffsetBits + ShiftBits, CN->getSExtValue())) {
      EVT ValTy = Addr.getValueType();

      // Return false if the offset not align on (1 << ShiftBits)
      if (ShiftBits)
        if (CN->getSExtValue() % (1 << ShiftBits) != 0)
          return false;

      // 16 bit 33 form load/store instruction not allow base as SP or FP.
      if (dyn_cast<FrameIndexSDNode>(Addr.getOperand(0)))
        return false;
      else
        Base = Addr.getOperand(0);

      Offset = CurDAG->getTargetConstant(CN->getZExtValue(), SDLoc(Addr),
                                         ValTy);
      return true;
    }
  }

  return false;
}

bool RISCVDAGToDAGISel::SelectAddrRegImm5uWord(SDValue Addr, SDValue &Base,
                                               SDValue &Offset) const {
  if (SelectAddr16BitInstOffset(Addr, Base, Offset, 5, 2))
    return true;

  if (!CurDAG->isBaseWithConstantOffset(Addr) &&
      !dyn_cast<FrameIndexSDNode>(Addr)) {
    EVT ValTy = Addr.getValueType();
    Base = Addr;
    Offset  = CurDAG->getTargetConstant(0, SDLoc(Addr), ValTy);
    return true;
  }
  return false;
}

bool RISCVDAGToDAGISel::SelectAddrRegImm5uDouble(SDValue Addr, SDValue &Base,
                                                 SDValue &Offset) const {
  if (SelectAddr16BitInstOffset(Addr, Base, Offset, 5, 3))
    return true;

  if (!CurDAG->isBaseWithConstantOffset(Addr) &&
      !dyn_cast<FrameIndexSDNode>(Addr)) {
    EVT ValTy = Addr.getValueType();
    Base = Addr;
    Offset  = CurDAG->getTargetConstant(0, SDLoc(Addr), ValTy);
    return true;
  }
  return false;
}

void RISCVDAGToDAGISel::Select(SDNode *Node) {
  SDLoc DL(Node);
  // Dump information about the Node being selected.
  DEBUG(errs() << "Selecting: "; Node->dump(CurDAG); errs() << "\n");

  // If we have a custom node, we have already selected
  if (Node->isMachineOpcode()) {
    DEBUG(errs() << "== "; Node->dump(CurDAG); errs() << "\n");
    Node->setNodeId(-1);
    return;
  }

  // Few custom selection stuff.
  switch (Node->getOpcode()) {
  default: break;
  case ISD::FrameIndex: {
    MVT PtrVT = Subtarget.isRV64() ? MVT::i64 : MVT::i32;
    int FI = cast<FrameIndexSDNode>(Node)->getIndex();
    SDValue TFI = CurDAG->getTargetFrameIndex(FI, PtrVT);
    if (Node->hasOneUse()) {
      CurDAG->SelectNodeTo(Node, ADDI, PtrVT, TFI,
                           CurDAG->getTargetConstant(0, DL, PtrVT));
      return;
    }
    ReplaceNode(Node, CurDAG->getMachineNode(ADDI, DL, PtrVT, TFI,
                          CurDAG->getTargetConstant(0, DL, PtrVT)));
    return;
  }
  }

  // Select the default instruction.
  SelectCode(Node);
}

bool RISCVDAGToDAGISel::
SelectInlineAsmMemoryOperand(const SDValue &Op, unsigned ConstraintID,
                             std::vector<SDValue> &OutOps) {
  switch (ConstraintID) {
  default: return true;
  // All memory constraints can at least accept raw pointers.
  case InlineAsm::Constraint_i:
    OutOps.push_back(Op);
    OutOps.push_back(CurDAG->getTargetConstant(0, SDLoc(Op), MVT::i32));
    return false;
  case InlineAsm::Constraint_m: // memory
    OutOps.push_back(Op);
    return false;
  }

  return true;
}

// This pass converts a legalized DAG into a RISCV-specific DAG, ready
// for instruction scheduling.
FunctionPass *llvm::createRISCVISelDag(RISCVTargetMachine &TM) {
  return new RISCVDAGToDAGISel(TM);
}
